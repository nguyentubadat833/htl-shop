// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  DESIGN
}

enum CartStatus {
  ACTIVE // đang thêm sản phẩm
  CHECKED_OUT // đã thanh toán, không dùng nữa
  ABANDONED // bỏ dở
}

enum PaymentStatus {
  PENDING // chờ thanh toán
  SUCCESS // thanh toán thành công
  FAILED // thanh toán thất bại
  REFUNDED // đã hoàn tiền (nếu có)
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  MOMO
  VNPAY
  MANUAL // chuyển khoản thủ công (nếu có)
}

enum OrderStatus {
  PENDING // chờ thanh toán
  PAID // đã thanh toán
  SENDING // (tùy chọn) đang gửi file
  DELIVERED // đã gửi file
  CANCELLED // bị hủy
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SOFT_DELETE
}

enum UserStatus {
  ACTIVE
  LOCKED
}

enum UserRole {
  ADMIN
}

enum AuthProvider {
  INTERNAL
  GOOGLE
  FACEBOOK
}

model User {
  id                Int          @id @default(autoincrement())
  publicId          String       @default(cuid())
  provider          AuthProvider
  providerAccountId String
  status            UserStatus   @default(ACTIVE)
  role              UserRole?
  name              String
  email             String
  image             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  products          Product[]
  orders            Order[]
  carts             Cart[]

  @@unique([provider, providerAccountId])
}

model ObjectStorage {
  id         BigInt    @id @default(autoincrement())
  publicId   String    @unique @default(ulid())
  bucket     String
  objectName String
  createdAt  DateTime  @default(now())
  uploadedAt DateTime?
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  type       FileType
  size       BigInt

  @@unique([bucket, objectName])
}

model Product {
  id              Int             @id @default(autoincrement())
  publicId        String          @unique @default(cuid())
  name            String
  price           Float
  status          ProductStatus   @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdByUser   User            @relation(fields: [createdByUserId], references: [id])
  createdByUserId Int
  orderItems      OrderItem[]
  carts           Cart[]
  files           ObjectStorage[]
}

model OrderItem {
  id        BigInt   @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   BigInt
}

model Order {
  id            BigInt      @id @default(autoincrement())
  publicId      String      @unique @default(ulid())
  items         OrderItem[]
  orderByUser   User        @relation(fields: [orderByUserId], references: [id])
  orderByUserId Int
  orderAt       DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        OrderStatus @default(PENDING)
  amount        Float
  payments      Payment[]
}

model Payment {
  id            String        @id @default(ulid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       BigInt
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  items     Product[]
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
